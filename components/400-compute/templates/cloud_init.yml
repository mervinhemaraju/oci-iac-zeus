#cloud-config
# Cloud-init configuration for GitHub Actions Runner

hostname: ${hostname}
package_update: true
package_upgrade: true

users:
  - name: opc
    groups: sudo
    shell: /bin/bash
    homedir: /home/opc
    sudo: "ALL=(ALL) NOPASSWD:ALL"
    ssh_authorized_keys:
      - "${authorized_ssh_key}"

  - name: th3pl4gu3
    groups: sudo
    shell: /bin/bash
    homedir: /home/th3pl4gu3
    sudo: "ALL=(ALL) NOPASSWD:ALL"
    ssh_authorized_keys:
      - "${authorized_ssh_key}"

  - name: githubrunner
    groups: sudo,docker
    shell: /bin/bash
    homedir: /home/githubrunner
    sudo: "ALL=(ALL) NOPASSWD:ALL"
    ssh_authorized_keys:
      - "${authorized_ssh_key}"

packages:
  - curl
  - wget
  - jq
  - libicu
  - openssl-devel
  - git
  - tar
  - python3-pip
  - oci-utils

write_files:
  # Set up environment variables
  - path: /etc/environment
    permissions: "0644"
    content: |
      GITHUB_PAT=${github_pat}
      GITHUB_ORG=plagueworks-org
    append: true

  # Run the setup script to configure the GitHub runner
  - path: /tmp/setup_runner.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e

      # Configuration
      GITHUB_ORG="plagueworks-org"
      GITHUB_PAT="${github_pat}"

      # Get runner registration token from GitHub API
      RUNNER_TOKEN=$(curl -s -X POST \
          -H "Authorization: token $GITHUB_PAT" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/orgs/$GITHUB_ORG/actions/runners/registration-token" \
          | jq -r '.token')

      # Create runner directory in /opt (better for SELinux)
      mkdir -p /opt/github-runner
      cd /opt/github-runner

  # Create systemd service for the GitHub runner
  - path: /etc/systemd/system/github-runner.service
    permissions: "0644"
    content: |
      [Unit]
      Description=GitHub Actions Runner
      After=network.target
      Wants=network.target

      [Service]
      Type=simple
      User=githubrunner
      Group=githubrunner
      WorkingDirectory=/opt/github-runner
      ExecStart=/opt/github-runner/run.sh
      Restart=always
      RestartSec=5
      Environment="GITHUB_PAT=${github_pat}"
      Environment="GITHUB_ORG=plagueworks-org"

      [Install]
      WantedBy=multi-user.target

  # Setup Python aliases
  - path: /etc/profile.d/python-aliases.sh
    permissions: "0644"
    content: |
      #!/bin/bash
      # System-wide Python aliases
      alias python=python3
      alias pip=pip3
      export PATH=$PATH:/usr/local/bin

  # Setup OCI CLI configuration
  - path: /home/githubrunner/.oci/config
    permissions: "0600"
    content: |
      [OCI-HELIOS]
      user=${oci_user_ocid_helios}
      fingerprint=${oci_fingerprint}
      tenancy=${oci_tenancy_ocid_helios}
      region=af-johannesburg-1
      key_file=/home/githubrunner/.oci/keys/oci_api_private_key.pem

      [OCI-ZEUS]
      user=${oci_user_ocid_zeus}
      fingerprint=${oci_fingerprint}
      tenancy=${oci_tenancy_ocid_zeus}
      region=af-johannesburg-1
      key_file=/home/githubrunner/.oci/keys/oci_api_private_key.pem

      [OCI-POSEIDON]
      user=${oci_user_ocid_poseidon}
      fingerprint=${oci_fingerprint}
      tenancy=${oci_tenancy_ocid_poseidon}
      region=uk-south-1
      key_file=/home/githubrunner/.oci/keys/oci_api_private_key.pem

      [OCI-GAIA]
      user=${oci_user_ocid_gaia}
      fingerprint=${oci_fingerprint}
      tenancy=${oci_tenancy_ocid_gaia}
      region=uk-south-1
      key_file=/home/githubrunner/.oci/keys/oci_api_private_key.pem

  # Setup OCI API Private Key
  - path: /home/githubrunner/.oci/keys/oci_api_private_key.pem
    permissions: "0600"
    encoding: b64
    content: ${oci_api_private_key_base64}

  # Setup OCI Compute Private Key
  - path: /home/githubrunner/.oci/keys/oci_compute_private_key.pem
    permissions: "0600"
    encoding: b64
    content: ${oci_compute_private_key_base64}

  # Setup OCI API Public Key
  - path: /home/githubrunner/.oci/keys/oci_api_public_key.pem
    permissions: "0600"
    encoding: b64
    content: ${oci_api_public_key_base64}

  # Setup OCI Compute Public Key
  - path: /home/githubrunner/.oci/keys/oci_compute_public_key.pem
    permissions: "0600"
    encoding: b64
    content: ${oci_compute_public_key_base64}

  # Create the directory for Cloudflare credentials
  - path: /home/githubrunner/cloudflare/cloudflare.ini
    permissions: "0600"
    content: |
      dns_cloudflare_api_token = ${cloudflare_api_token}

runcmd:
  # Disable the firewalld
  - systemctl stop firewalld
  - systemctl disable firewalld

  # Automatic growth of volume
  - /usr/libexec/oci-growfs -y

  # Install the EPEL 9 Repository
  - dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm

  # Install EPEL dependent packages
  - dnf install -y python39-oci-cli snapd

  # Setup snapd properly
  - systemctl enable --now snapd.socket
  - systemctl start snapd.service
  - ln -s /var/lib/snapd/snap /snap || true

  # Wait for snapd to be ready
  - sleep 10
  - snap wait system seed.loaded

  # Install Docker
  - dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo
  - dnf install -y docker-ce
  - systemctl start docker
  - systemctl enable docker

  # Add opc and th3pl4gu3 user to required groups (if not already done)
  - usermod -aG docker opc
  - usermod -aG docker th3pl4gu3
  - usermod -aG docker githubrunner

  # Install Certbot
  - snap install --classic certbot
  - ln -s /snap/bin/certbot /usr/bin/certbot || true

  # Install Clouflare DNS plugin
  - snap set certbot trust-plugin-with-root=ok
  - snap install certbot-dns-cloudflare
  - snap connect certbot:plugin certbot-dns-cloudflare

  # Set folder owners
  - chown -R githubrunner:githubrunner /home/githubrunner
  - chown -R githubrunner:githubrunner /home/githubrunner/cloudflare

  # Source environment variables and run setup script
  - bash -c "source /etc/environment && /tmp/setup_runner.sh"

  # Enable and start the GitHub runner service
  - systemctl daemon-reload
  - systemctl enable github-runner.service
  - systemctl start github-runner.service

# Final message
final_message: "GitHub Runner setup completed successfully!"
