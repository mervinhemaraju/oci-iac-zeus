#cloud-config
# Cloud-init configuration for GitHub Actions Runner

users:
  - name: opc
    groups: sudo
    shell: /bin/bash
    homedir: /home/opc
    sudo: "ALL=(ALL) NOPASSWD:ALL"
    ssh_authorized_keys:
      - "${authorized_ssh_key}"

  - name: th3pl4gu3
    groups: sudo
    shell: /bin/bash
    homedir: /home/th3pl4gu3
    sudo: "ALL=(ALL) NOPASSWD:ALL"
    ssh_authorized_keys:
      - "${authorized_ssh_key}"

  - name: githubrunner
    groups: sudo
    shell: /bin/bash
    homedir: /home/githubrunner
    sudo: "ALL=(ALL) NOPASSWD:ALL"
    ssh_authorized_keys:
      - "${authorized_ssh_key}"

packages:
  - curl
  - wget
  - jq
  - libicu
  - openssl-devel
  - git
  - tar

write_files:
  - path: /opt/setup-github-runner.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e

      # Log output
      exec > >(tee -a /var/log/github-runner-setup.log)
      exec 2>&1

      echo "Starting GitHub Runner setup at $(date)"

      # Variables from Terraform
      GITHUB_ORG_URL="${github_org_url}"
      GITHUB_TOKEN="${github_runner_token}"
      RUNNER_NAME="${runner_name}"
      RUNNER_LABELS="${runner_labels}"
      RUNNER_WORK_DIR="${runner_work_dir}"

      # Wait for githubrunner user to be created
      while ! id -u githubrunner >/dev/null 2>&1; do
        echo "Waiting for githubrunner user to be created..."
        sleep 2
      done

      # Setup runner directory
      RUNNER_HOME="/home/githubrunner/actions-runner"
      mkdir -p "$RUNNER_HOME"
      cd "$RUNNER_HOME"

      # Determine architecture
      ARCH=$(uname -m)
      if [[ "$ARCH" == "x86_64" ]]; then
          RUNNER_ARCH="x64"
      elif [[ "$ARCH" == "aarch64" ]] || [[ "$ARCH" == "arm64" ]]; then
          RUNNER_ARCH="arm64"
      else
          echo "Unsupported architecture: $ARCH"
          exit 1
      fi

      # Get latest runner version
      echo "Fetching latest runner version..."
      LATEST_VERSION=$(curl -s https://api.github.com/repos/actions/runner/releases/latest | jq -r '.tag_name' | sed 's/v//')
      if [ -z "$LATEST_VERSION" ]; then
          echo "Failed to get latest version, using fallback"
          LATEST_VERSION="2.327.1"
      fi
      echo "Using runner version: $LATEST_VERSION"

      # Download and extract runner
      RUNNER_FILE="actions-runner-linux-$${RUNNER_ARCH}-$${LATEST_VERSION}.tar.gz"
      RUNNER_URL="https://github.com/actions/runner/releases/download/v$${LATEST_VERSION}/$${RUNNER_FILE}"

      echo "Downloading runner from: $RUNNER_URL"
      curl -o "$RUNNER_FILE" -L "$RUNNER_URL"
      tar xzf "$RUNNER_FILE"
      rm "$RUNNER_FILE"

      # Set ownership
      chown -R githubrunner:githubrunner "$RUNNER_HOME"

      # Install dependencies as githubrunner
      echo "Installing dependencies..."
      sudo -u githubrunner ./bin/installdependencies.sh

      # Configure runner
      echo "Configuring runner..."
      sudo -u githubrunner ./config.sh \
          --url "$GITHUB_ORG_URL" \
          --token "$GITHUB_TOKEN" \
          --name "$RUNNER_NAME" \
          --labels "$RUNNER_LABELS" \
          --work "$RUNNER_WORK_DIR" \
          --unattended \
          --replace

      # Create systemd service
      echo "Creating systemd service..."
      cat > /etc/systemd/system/github-runner.service <<EOF
      [Unit]
      Description=GitHub Actions Runner
      After=network.target

      [Service]
      Type=simple
      User=githubrunner
      Group=githubrunner
      WorkingDirectory=$RUNNER_HOME
      ExecStart=$RUNNER_HOME/run.sh
      Restart=always
      RestartSec=10
      KillMode=process
      KillSignal=SIGTERM
      StandardOutput=journal
      StandardError=journal

      [Install]
      WantedBy=multi-user.target
      EOF

      # Start the service
      systemctl daemon-reload
      systemctl enable github-runner.service
      systemctl start github-runner.service

      # Check status
      sleep 5
      if systemctl is-active --quiet github-runner.service; then
          echo "GitHub Runner service is running successfully!"
          systemctl status github-runner.service --no-pager
      else
          echo "GitHub Runner service failed to start"
          journalctl -u github-runner.service --no-pager -n 50
      fi

      echo "GitHub Runner setup completed at $(date)"

runcmd:
  - chmod +x /opt/setup-github-runner.sh
  - /opt/setup-github-runner.sh
